---
#### Tweak a lot of OSX built ins
# Not an exact list anywhere, but to see more defaults write options: http://www.defaults-write.com/
####
- name: See if we've set login items already
  command: osascript -e 'tell application "System Events" to get the name of every login item'
  register: startup_apps
  changed_when: false

- name: Set up login items
  command: osascript -e 'tell application "System Events" to make login item at end with properties {path:"{{ item.path }}", hidden:"{{ item.hidden }}" }'
  with_items: "{{ login_items }}"
  when: '"Bartender" not in startup_apps.stdout'

- name: Finder tweaks
  osx_defaults:
    domain: com.apple.finder
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { key: EmptyTrashSecurely, type: bool, value: "true" }
    # Choose Finder window view; Options clmv=column, list=list, icnv=icon, flwv=flow
    - { key: FXPreferredViewStyle, type: string, value: "clmv" }
    - { key: WarnOnEmptyTrash, type: bool, value: "true" }
    # Allow highlighting in quick look
    - { key: QLEnableTextSelection, type: bool, value: "true" }
    # Show POSIX path in titlebar of Finder windows
    - { key: _FXShowPosixPathInTitle, type: bool, value: "true" }
    - { key: AppleShowAllFiles, type: bool, value: "false" }
    - { key: ShowHardDrivesOnDesktop, type: bool, value: "false" }
    - { key: ShowMountedServersOnDesktop, type: bool, value: "false" }
    - { key: ShowExternalDisksOnDesktop, type: bool, value: "false" }
    - { key: ShowRemovableMediaOnDesktop, type: bool, value: "false" }
    # Next two change what new Finder window opens to
    - { key: NewWindowTarget, type: string, value: "PfLo" }
    - { key: NewWindowTargetPath, type: string, value: "{{ finder_new_window_path }}" }
    - { key: DisableAllAnimations, type: bool, value: "true" }
    # Hide the "Are you sure?" when quitting
    - { key: QuitMenuItem, type: bool, value: "false" }
  notify: kill_finder

- name: Global tweaks
  osx_defaults:
    domain: NSGlobalDomain
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { key: AppleShowAllExtensions, type: bool, value: "false" }
    - { key: AppleEnableMenuBarTransparency, type: bool, value: "true" }
    # Enable Dark Mode
    - { key: AppleInterfaceStyle, type: string, value: "Dark" }
    # Spring loading for directories
    - { key: com.apple.springing.enabled, type: bool, value: "true" }
    # Remove the spring loading delay for directories
    - { key: com.apple.springing.delay, type: float, value: 0 }
    # When to show scroll bars; Possible values= `WhenScrolling`, `Automatic` and `Always`
    - { key: AppleShowScrollBars, type: string, value: "WhenScrolling" }
    # Smooth scrolling
    - { key: NSScrollAnimationEnabled, type: bool, value: "true" }
    # Default to expand save panel by default (not sure why there's two names for this)
    - { key: NSNavPanelExpandedStateForSaveMode, type: bool, value: "true" }
    - { key: NSNavPanelExpandedStateForSaveMode2, type: bool, value: "true" }
    # Default to expand print panel by default (not sure why there's two names for this)
    - { key: PMPrintingExpandedStateForPrint, type: bool, value: "true" }
    - { key: PMPrintingExpandedStateForPrint2, type: bool, value: "true" }
    # OSX defaults to saving to icloud
    - { key: NSDocumentSaveNewDocumentsToCloud, type: bool, value: "false" }
    # Resume apps
    - { key: NSQuitAlwaysKeepsWindows, type: bool, value: "false" }
    # Stupid smart quotes and dashes
    - { key: NSAutomaticQuoteSubstitutionEnabled, type: bool, value: "false" }
    - { key: NSAutomaticDashSubstitutionEnabled, type: bool, value: "false" }
    - { key: AppleMetricUnits, type: bool, value: "false" }
    # Auto correct spelling
    - { key: NSAutomaticSpellingCorrectionEnabled, type: bool, value: "false" }
    # Tap to click trackpad
    - { key: com.apple.mouse.tapBehavior, type: int, value: 1 }
    # Natural style scrolling
    - { key: com.apple.swipescrolldirection, type: bool, value: "false" }

- name: Launch Service tweaks
  osx_defaults:
    domain: com.apple.LaunchServices
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Are you sure you want to open this application
    - { key: LSQuarantine, type: bool, value: "false" }

- name: Desktop Services tweaks
  osx_defaults:
    domain: com.apple.desktopServices
    key: DSDontWriteNetworkStores
    type: string
    value: true
    state: present

- name: Battery tweaks
  osx_defaults:
      domain: com.apple.menuextra.battery
      key: ShowPercent
      type: string
      value: "YES"
      state: present
  notify: kill_systemUIserver

- name: Help Viewer tweaks
  osx_defaults:
    domain: com.apple.helpviewer
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Set help viewer window mode; false=floating
    - { key: DevMode, type: bool, value: "true" }

- name: Bluetooth tweaks
  osx_defaults:
    domain: com.apple.BluetoothAudioAgent
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # higher quality with bluetooth headphones
    - { key: "Apple Bitpool Min (editable)", type: int, value: 40 }

- name: Universal Access tweaks
  osx_defaults:
    domain: com.apple.universalaccess
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # zoom to mouse
    - { key: closeViewZoomFollowFocus, type: bool, value: "false" }

- name: Screensaver tweaks
  osx_defaults:
    domain: com.apple.screensaver
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Require password (value = 1) after sleep or screen saver begins
    - { key: askForPassword, type: int, value: 1 }
    # How long to wait to require password (0 = immediately)
    - { key: askForPasswordDelay, type: float, value: 0 }

- name: Screenshots tweaks
  osx_defaults:
    domain: com.apple.screencapture
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # choose where to save screenshots
    - { key: location, type: string, value: "{{ screenshots_dir }}" }
    # Save screenshots to your defined location
    - { key: type, type: string, value: "png" }

- name: Dashboard tweaks
  osx_defaults:
    domain: com.apple.dashboard
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Disable dashboard with true
    - { key: mcx-disabled, type: bool, value: "true" }

- name: Dock tweaks
  osx_defaults:
    domain: com.apple.dock
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Change minimize/maximize effect
    - { key: mineffect, type: string, value: "scale" }
    # Minimize windows into their application's icon
    - { key: minimize-to-application, type: bool, value: "true" }
    # Enable spring loading for all Dock items
    - { key: enable-spring-load-actions-on-all-items, type: bool, value: "true" }
    # Show indicator lights for open applications in the Dock
    - { key: show-process-indicators, type: bool, value: "true" }
    # Animate opening applications from the Dock
    - { key: launchanim, type: bool, value: "false" }
    # Don’t show Dashboard as a Space
    - { key: dashboard-in-overlay, type: bool, value: "false" }
    # Don’t automatically rearrange Spaces based on most recent use
    - { key: mru-spaces, type: bool, value: "false" }
    # Remove the animation when hiding/showing the Dock
    - { key: autohide-time-modifier, type: float, value: 0 }
    # Automatically hide and show the Dock
    - { key: autohide, type: bool, value: "true" }
    # Make Dock icons of hidden applications translucent
    - { key: showhidden, type: bool, value: "true" }
    # Make Dock more transparent
    - { key: hide-mirror, type: bool, value: "true" }
  notify: kill_dock

- name: Make sure dockutil is installed
  homebrew:
      name: dockutil
      state: present

- name: Dockutil | Check to see if we've already added apps
  shell: 'dockutil --find iterm /Users/{{ usernm }}'
  register: dockutil_apps
  changed_when: false
  failed_when: false

- name: Dockutil | Clear apps from the dock
  command: dockutil --remove all --no-restart
  when: '"not found" in dockutil_apps.stdout'
  changed_when: false
  notify: kill_dock

- name: Dockutil | Clear spacers from the dock
  command: dockutil --remove spacer-tiles
  when: '"not found" in dockutil_apps.stdout'
  changed_when: false
  notify: kill_dock

- name: Dockutil | Add apps
  command: dockutil --add '{{ item.path }}' --position '{{ item.pos }}' --no-restart
  with_items: "{{ dockutil_desired }}"
  when: '"not found" in dockutil_apps.stdout'
  notify: kill_dock

- name: Dockutil | Add items
  command: dockutil --add '{{ item.path }}' --position '{{ item.pos }}' --view '{{ item.view }}' --display '{{ item.display }}' --sort '{{ item.sort }}' --no-restart
  with_items: "{{ dockutil_desired_right }}"
  when: '"not found" in dockutil_apps.stdout'
  notify: kill_dock

- name: Time Machine tweaks
  osx_defaults:
    domain: com.apple.TimeMachine
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    # Don't offer up each new external HD as a time machine destination
    - { key: DoNotOfferNewDisksForBackup, type: bool, value: "true" }

- name: Disable local Time Machine snapshots
  command: tmutil disable
  become: true
  become_user: root
  changed_when: false

### Misc tweaks
- block:
    - name: Check if we turned off keyboard media keys to itunes
      shell: launchctl list | grep -i com.apple.rcd
      register: itunes_media_keys
      changed_when: false
      failed_when: false

    - name: Stop iTunes from responding to the keyboard media keys
      shell: launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null
      when: itunes_media_keys.rc == 0

    - name: Check if set to automatically reboot on freezes
      command: systemsetup -getrestartfreeze
      register: restart_freeze
      changed_when: false

    - name: Restart automatically if the computer freezes
      command: systemsetup -setrestartfreeze on
      when: '"On" not in restart_freeze.stdout'

    - name: Check if sleep mode is set to off
      command: systemsetup -getcomputersleep
      register: sleep_mode
      changed_when: false

    - name: Never go into computer sleep mode
      command: systemsetup -setcomputersleep Never
      when: '"Never" not in sleep_mode.stdout'

    - name: Check if timezone is set properly
      command: systemsetup -gettimezone
      register: current_timezone
      changed_when: false

    - name: Set timezone
      command: systemsetup -settimezone "{{ timezone }}"
      when: not current_timezone.stdout is search( timezone )

    - name: SSD Tweaks
      command: "pmset -a {{ item.name }} {{ item.value }}"
      with_items:
        # Disable sudden motion sensor if you have an SSD
        - { name: sms, value: 0 }
        # Disable hibernate mode; useful with SSD
        - { name: hibernatemode, value: 0 }
      changed_when: false

  become: true
  become_user: root

- name: Check to see if Users' Library folder is hidden
  shell: "ls -Old {{ home_dir }}/Library | awk '{ print $5 }'"
  register: library_hidden
  changed_when: false

- name: Always show the Users' Library folder
  command: chflags nohidden {{ home_dir }}/Library/
  when: '"hidden" in library_hidden.stdout'

- name: Run vim plug installer
  command: vim :PlugInstall :qall
  run_once: yes
